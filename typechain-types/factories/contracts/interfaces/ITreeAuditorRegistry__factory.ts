/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ITreeAuditorRegistry,
  ITreeAuditorRegistryInterface,
} from "../../../contracts/interfaces/ITreeAuditorRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "auditor_",
        type: "address",
      },
    ],
    name: "AuditorAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "auditor_",
        type: "address",
      },
    ],
    name: "AuditorRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "auditor_",
        type: "address",
      },
    ],
    name: "addAuditor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "auditor",
        type: "address",
      },
    ],
    name: "isAuditor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "auditor",
        type: "address",
      },
    ],
    name: "removeAuditor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ITreeAuditorRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): ITreeAuditorRegistryInterface {
    return new utils.Interface(_abi) as ITreeAuditorRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ITreeAuditorRegistry {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ITreeAuditorRegistry;
  }
}
