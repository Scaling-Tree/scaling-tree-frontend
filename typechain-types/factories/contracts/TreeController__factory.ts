/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TreeController,
  TreeControllerInterface,
} from "../../contracts/TreeController";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "treeNFT_",
        type: "address",
      },
      {
        internalType: "address",
        name: "auditorRegistry_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovedForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "treeNumber",
        type: "uint256",
      },
    ],
    name: "TreeAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "TreeApproved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "auditor",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "treeNumber",
        type: "uint256",
      },
    ],
    name: "TreeAudited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "TreeTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "TreeWithdrew",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_treeNumber",
        type: "uint256",
      },
    ],
    name: "addNFT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_treeNumber",
        type: "uint256",
      },
    ],
    name: "audit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "auditorRegistry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "checkTreeOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "getTreeId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_treeNumber",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_uri",
        type: "string",
      },
    ],
    name: "mintNFT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_treeId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_treeId",
        type: "uint256",
      },
    ],
    name: "treeInitialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "treeNFT",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_treeId",
        type: "uint256",
      },
    ],
    name: "treeRecords",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "nftAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
        ],
        internalType: "struct ITreeController.Tree",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620025ff380380620025ff83398181016040528101906200003791906200012b565b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000172565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f382620000c6565b9050919050565b6200010581620000e6565b81146200011157600080fd5b50565b6000815190506200012581620000fa565b92915050565b60008060408385031215620001455762000144620000c1565b5b6000620001558582860162000114565b9250506020620001688582860162000114565b9150509250929050565b61247d80620001826000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806353c5d7a6116100a2578063beabacc811610071578063beabacc814610351578063c8028bee1461036d578063e1f21c671461038b578063e985e9c5146103a7578063f3fef3a3146103d757610116565b806353c5d7a6146102b75780636352211e146102d5578063a22cb46514610305578063af73a86c1461032157610116565b806315dacbea116100e957806315dacbea146101db5780631a0c8fa0146101f757806337692cc514610227578063428d956d146102575780634a42daf01461028757610116565b806308cfdc371461011b578063098f23661461014b5780630aa4b2241461017b578063150b7a02146101ab575b600080fd5b61013560048036038101906101309190611730565b610407565b6040516101429190611792565b60405180910390f35b610165600480360381019061016091906117ad565b610565565b60405161017291906117fc565b60405180910390f35b61019560048036038101906101909190611817565b6105fd565b6040516101a29190611885565b60405180910390f35b6101c560048036038101906101c09190611905565b610678565b6040516101d291906119c8565b60405180910390f35b6101f560048036038101906101f091906119e3565b6106e0565b005b610211600480360381019061020c9190611b8b565b610792565b60405161021e9190611792565b60405180910390f35b610241600480360381019061023c91906117ad565b61091d565b60405161024e9190611792565b60405180910390f35b610271600480360381019061026c9190611be7565b610953565b60405161027e9190611c83565b60405180910390f35b6102a1600480360381019061029c9190611be7565b6109fa565b6040516102ae9190611885565b60405180910390f35b6102bf610a24565b6040516102cc91906117fc565b60405180910390f35b6102ef60048036038101906102ea9190611be7565b610a4e565b6040516102fc91906117fc565b60405180910390f35b61031f600480360381019061031a9190611cca565b610a8b565b005b61033b60048036038101906103369190611730565b610bee565b6040516103489190611792565b60405180910390f35b61036b60048036038101906103669190611817565b610d97565b005b610375610df6565b60405161038291906117fc565b60405180910390f35b6103a560048036038101906103a09190611817565b610e20565b005b6103c160048036038101906103bc9190611d0a565b611017565b6040516103ce9190611885565b60405180910390f35b6103f160048036038101906103ec91906117ad565b6110ab565b6040516103fe9190611792565b60405180910390f35b6000610415600085856105fd565b610454576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044b90611da7565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663b88d4fde33308660016040516020016104859190611885565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016104b39493929190611e46565b600060405180830381600087803b1580156104cd57600080fd5b505af11580156104e1573d6000803e3d6000fd5b5050505060006104f185856112c0565b90508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fff3e48460c38a9c90a4d6ac9d32042eeab333a270c2f9b8d5f7c36c1778d4b2f8686604051610552929190611e92565b60405180910390a3809150509392505050565b600080610572848461091d565b9050610580600085856105fd565b156105c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b790611f07565b60405180910390fd5b6005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505092915050565b60008061060a848461091d565b90508473ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149150509392505050565b600080838381019061068a9190611f27565b9050806106cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c390611fa0565b60405180910390fd5b63150b7a0260e01b91505095945050505050565b8181856106ee3384846105fd565b8061072d57503373ffffffffffffffffffffffffffffffffffffffff166107158484610565565b73ffffffffffffffffffffffffffffffffffffffff16145b8061073e575061073d8133611017565b5b61077d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077490612032565b60405180910390fd5b610789878787876114c7565b50505050505050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6dda936308560016040516020016107e79190611885565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161081493929190612096565b6020604051808303816000875af1158015610833573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085791906120f0565b90506000610887600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836112c0565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fff3e48460c38a9c90a4d6ac9d32042eeab333a270c2f9b8d5f7c36c1778d4b2f848860405161090a929190611e92565b60405180910390a3809250505092915050565b6000828260405160200161093292919061211d565b6040516020818303038152906040528051906020012060001c905092915050565b61095b61164f565b6000808381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff1615151515815250509050919050565b60006001600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610af9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af090612192565b60405180910390fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508015158273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa21b48f27c6741249c6cfca168c8a70c9b165e156f1312ca722752dc09cfbbf060405160405180910390a45050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166349b90557336040518263ffffffff1660e01b8152600401610c4b91906117fc565b602060405180830381865afa158015610c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8c91906121c7565b610ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc290612240565b60405180910390fd5b6000610cd7858561091d565b9050610ce5600086866105fd565b15610d25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1c90611f07565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f59b6de30da249fc7c3e95adf82507595c996bf7bc95ed74bf0ae26689b45dd808686604051610d84929190611e92565b60405180910390a3809150509392505050565b8181610da43383836105fd565b610de3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dda906122ac565b60405180910390fd5b610def338686866114c7565b5050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610e2c838361091d565b905060006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610ed4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecb90612318565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3990612384565b60405180910390fd5b846005600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa202a5da54238fdf5670c6c29658ce4239011a3ad0d4a88c31f44cef16ec81f5866040516110089190611792565b60405180910390a45050505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600082826110ba3383836105fd565b6110f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f0906122ac565b60405180910390fd5b6000611105868661091d565b9050600080600083815260200190815260200160002060020160006101000a81548160ff02191690831515021790555060006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff166342842e0e3033886040518463ffffffff1660e01b81526004016111c5939291906123a4565b600060405180830381600087803b1580156111df57600080fd5b505af11580156111f3573d6000803e3d6000fd5b505050506005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f58eff3471754b729d95247ab518c16a45996e2330f079e80fd30d1801a5a3cc6876040516112ac9190611792565b60405180910390a380935050505092915050565b6000806112cd848461091d565b905060006001600083815260200190815260200160002060009054906101000a900460ff1690508061143b57600060405180606001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020016001151581525090508060008085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550905050336002600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180600085815260200190815260200160002060006101000a81548160ff021916908315150217905550506114bc565b336002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160008084815260200190815260200160002060020160006101000a81548160ff0219169083151502179055505b819250505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152d90612427565b60405180910390fd5b6000611542838361091d565b9050836002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690558273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f8487c993ba852fffa82aad3906d10e2e0b2d974c3dfa1f386ade07672c757984856040516116409190611792565b60405180910390a45050505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116c78261169c565b9050919050565b6116d7816116bc565b81146116e257600080fd5b50565b6000813590506116f4816116ce565b92915050565b6000819050919050565b61170d816116fa565b811461171857600080fd5b50565b60008135905061172a81611704565b92915050565b60008060006060848603121561174957611748611692565b5b6000611757868287016116e5565b93505060206117688682870161171b565b92505060406117798682870161171b565b9150509250925092565b61178c816116fa565b82525050565b60006020820190506117a76000830184611783565b92915050565b600080604083850312156117c4576117c3611692565b5b60006117d2858286016116e5565b92505060206117e38582860161171b565b9150509250929050565b6117f6816116bc565b82525050565b600060208201905061181160008301846117ed565b92915050565b6000806000606084860312156118305761182f611692565b5b600061183e868287016116e5565b935050602061184f868287016116e5565b92505060406118608682870161171b565b9150509250925092565b60008115159050919050565b61187f8161186a565b82525050565b600060208201905061189a6000830184611876565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126118c5576118c46118a0565b5b8235905067ffffffffffffffff8111156118e2576118e16118a5565b5b6020830191508360018202830111156118fe576118fd6118aa565b5b9250929050565b60008060008060006080868803121561192157611920611692565b5b600061192f888289016116e5565b9550506020611940888289016116e5565b94505060406119518882890161171b565b935050606086013567ffffffffffffffff81111561197257611971611697565b5b61197e888289016118af565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6119c28161198d565b82525050565b60006020820190506119dd60008301846119b9565b92915050565b600080600080608085870312156119fd576119fc611692565b5b6000611a0b878288016116e5565b9450506020611a1c878288016116e5565b9350506040611a2d878288016116e5565b9250506060611a3e8782880161171b565b91505092959194509250565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a9882611a4f565b810181811067ffffffffffffffff82111715611ab757611ab6611a60565b5b80604052505050565b6000611aca611688565b9050611ad68282611a8f565b919050565b600067ffffffffffffffff821115611af657611af5611a60565b5b611aff82611a4f565b9050602081019050919050565b82818337600083830152505050565b6000611b2e611b2984611adb565b611ac0565b905082815260208101848484011115611b4a57611b49611a4a565b5b611b55848285611b0c565b509392505050565b600082601f830112611b7257611b716118a0565b5b8135611b82848260208601611b1b565b91505092915050565b60008060408385031215611ba257611ba1611692565b5b6000611bb08582860161171b565b925050602083013567ffffffffffffffff811115611bd157611bd0611697565b5b611bdd85828601611b5d565b9150509250929050565b600060208284031215611bfd57611bfc611692565b5b6000611c0b8482850161171b565b91505092915050565b611c1d816116bc565b82525050565b611c2c816116fa565b82525050565b611c3b8161186a565b82525050565b606082016000820151611c576000850182611c14565b506020820151611c6a6020850182611c23565b506040820151611c7d6040850182611c32565b50505050565b6000606082019050611c986000830184611c41565b92915050565b611ca78161186a565b8114611cb257600080fd5b50565b600081359050611cc481611c9e565b92915050565b60008060408385031215611ce157611ce0611692565b5b6000611cef858286016116e5565b9250506020611d0085828601611cb5565b9150509250929050565b60008060408385031215611d2157611d20611692565b5b6000611d2f858286016116e5565b9250506020611d40858286016116e5565b9150509250929050565b600082825260208201905092915050565b7f416c726561647920686173206f776e6572000000000000000000000000000000600082015250565b6000611d91601183611d4a565b9150611d9c82611d5b565b602082019050919050565b60006020820190508181036000830152611dc081611d84565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e01578082015181840152602081019050611de6565b60008484015250505050565b6000611e1882611dc7565b611e228185611dd2565b9350611e32818560208601611de3565b611e3b81611a4f565b840191505092915050565b6000608082019050611e5b60008301876117ed565b611e6860208301866117ed565b611e756040830185611783565b8181036060830152611e878184611e0d565b905095945050505050565b6000604082019050611ea76000830185611783565b611eb46020830184611783565b9392505050565b7f5472656520686173206e6f206f776e6572000000000000000000000000000000600082015250565b6000611ef1601183611d4a565b9150611efc82611ebb565b602082019050919050565b60006020820190508181036000830152611f2081611ee4565b9050919050565b600060208284031215611f3d57611f3c611692565b5b6000611f4b84828501611cb5565b91505092915050565b7f446f206e6f742073616665207472616e73666572000000000000000000000000600082015250565b6000611f8a601483611d4a565b9150611f9582611f54565b602082019050919050565b60006020820190508181036000830152611fb981611f7d565b9050919050565b7f4973206e6f742074726565206f776e6572206e6f7220617070726f766564206f60008201527f70657261746f7200000000000000000000000000000000000000000000000000602082015250565b600061201c602783611d4a565b915061202782611fc0565b604082019050919050565b6000602082019050818103600083015261204b8161200f565b9050919050565b600081519050919050565b600061206882612052565b6120728185611d4a565b9350612082818560208601611de3565b61208b81611a4f565b840191505092915050565b60006060820190506120ab60008301866117ed565b81810360208301526120bd818561205d565b905081810360408301526120d18184611e0d565b9050949350505050565b6000815190506120ea81611704565b92915050565b60006020828403121561210657612105611692565b5b6000612114848285016120db565b91505092915050565b600060408201905061213260008301856117ed565b61213f6020830184611783565b9392505050565b7f43616e6e6f7420617070726f766520746f2063616c6c65720000000000000000600082015250565b600061217c601883611d4a565b915061218782612146565b602082019050919050565b600060208201905081810360008301526121ab8161216f565b9050919050565b6000815190506121c181611c9e565b92915050565b6000602082840312156121dd576121dc611692565b5b60006121eb848285016121b2565b91505092915050565b7f596f7520617265206e6f7420616e2061756469746f7200000000000000000000600082015250565b600061222a601683611d4a565b9150612235826121f4565b602082019050919050565b600060208201905081810360008301526122598161221d565b9050919050565b7f4973206e6f742074726565206f776e6572000000000000000000000000000000600082015250565b6000612296601183611d4a565b91506122a182612260565b602082019050919050565b600060208201905081810360008301526122c581612289565b9050919050565b7f43616e6e6f7420617070726f766520746f206f776e6572000000000000000000600082015250565b6000612302601783611d4a565b915061230d826122cc565b602082019050919050565b60006020820190508181036000830152612331816122f5565b9050919050565b7f4d7573742062652063616c6c6564206279206f776e6572000000000000000000600082015250565b600061236e601783611d4a565b915061237982612338565b602082019050919050565b6000602082019050818103600083015261239d81612361565b9050919050565b60006060820190506123b960008301866117ed565b6123c660208301856117ed565b6123d36040830184611783565b949350505050565b7f43616e6e6f74207472616e7366657220746f206e756c6c206164647265737300600082015250565b6000612411601f83611d4a565b915061241c826123db565b602082019050919050565b6000602082019050818103600083015261244081612404565b905091905056fea2646970667358221220ea24853584b5bdc40768528c546016c77c2acd9d3869dd6ebfc048ef4d30dd5c64736f6c63430008120033";

type TreeControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TreeControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TreeController__factory extends ContractFactory {
  constructor(...args: TreeControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    treeNFT_: PromiseOrValue<string>,
    auditorRegistry_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TreeController> {
    return super.deploy(
      treeNFT_,
      auditorRegistry_,
      overrides || {}
    ) as Promise<TreeController>;
  }
  override getDeployTransaction(
    treeNFT_: PromiseOrValue<string>,
    auditorRegistry_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      treeNFT_,
      auditorRegistry_,
      overrides || {}
    );
  }
  override attach(address: string): TreeController {
    return super.attach(address) as TreeController;
  }
  override connect(signer: Signer): TreeController__factory {
    return super.connect(signer) as TreeController__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TreeControllerInterface {
    return new utils.Interface(_abi) as TreeControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TreeController {
    return new Contract(address, _abi, signerOrProvider) as TreeController;
  }
}
